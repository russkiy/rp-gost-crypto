Символы_кода_числа = \
	'АБВГҐДЕЄЁЖЗИІЇЙКЛМНОПРСТУЎФХЦЧШЩ' + \
	'ЪЫЬЭЮЯабвгґдеєёжзиіїйклмнопрстуў' + \
	'фхцчшщъыьэюяABCDEFGHIJKLMNOPQRST' + \
	'UVWXYZabcdefghijklmnopqrstuvwxyz'

Функция Из_байтов(данные, длина = Пусто):
	код = ''
	Для i из Ряд(0, Длина(данные), 7):
		число = 0
		байтов_в_блоке = Мин(7, Длина(данные) - i)
		Для j из Ряд(байтов_в_блоке):
			число += Цел(данные[i + j]) << (8 * j)
		символов = Цел((байтов_в_блоке * 8 + 6) / 7)
		Для j из Ряд(символов):
			код += Символы_кода_числа[число % 128]
			число >>= 7
	Если длина != Пусто и длина > Длина(код):
		код += Символы_кода_числа[0] * (длина - Длина(код))
	Вернуть код

Функция В_байты(код):
	байты = БайтМассив()
	Для i из Ряд(0, Длина(код), 8):
		число = 0
		символов_в_блоке = Мин(8, Длина(код) - i)
		Для j из Ряд(символов_в_блоке):
			индекс = Символы_кода_числа.Найти(код[i + j])
			Если индекс != -1: число += индекс << (j * 7)
		байтов = Мин(Цел(символов_в_блоке * 7 / 8), 7)
		Для j из Ряд(байтов):
			байты.Добавить((число >> (8 * j)) & 0xFF)
	Вернуть Байты(байты)

Функция Из_числа(число, длина = Пусто):
	байты = число.В_байты(
		(число.Длина_в_битах() + 7) // 8 если длина это Пусто иначе длина,
		порядок = 'МлСт'
	)
	Вернуть Из_байтов(байты, длина если длина это не Пусто иначе Пусто)

Функция В_число(код):
	байты = В_байты(код)
	Вернуть Цел.Из_байтов(байты, порядок = 'МлСт')

Функция Числа_в_составной_код(числа, длина):
	байты_всех_чисел = БайтМассив()
	Для число из числа:
		байты_числа = число.В_байты(длина, порядок = 'МлСт')
		байты_всех_чисел.Дополнить(байты_числа)
	Вернуть Из_байтов(байты_всех_чисел, Цел(длина * Длина(числа) * 8 / 7))

Функция Составной_код_в_числа(код, длина):
	байты_всех_чисел = В_байты(код)
	числа = []
	Для сч из Ряд(0, Длина(байты_всех_чисел), длина):
		байты_числа = байты_всех_чисел[сч : сч + длина]
		Если Длина(байты_числа) == длина:
			число = Цел.Из_байтов(байты_числа, порядок = 'МлСт')
			числа.Добавить(число)
	Вернуть числа

Функция Строку_в_байты(строка):
	Вернуть Байты(строка, 'utf_16le')

Функция Байты_в_строку(байты):
	Вернуть байты.Раскодовать('utf_16le')

Функция Из_подписи(подпись, длинный_хэш = Нет):
	Вернуть Числа_в_составной_код(подпись, 64 если длинный_хэш иначе 32)

Функция В_подпись(код, длинный_хэш = Нет):
	Вернуть Кортеж(Составной_код_в_числа(код, 64 если длинный_хэш иначе 32))

__Экспорт__ = [
	'Из_байтов', 'В_байты', 'Из_числа', 'В_число',
	'Числа_в_составной_код', 'Составной_код_в_числа',
	'Строку_в_байты', 'Байты_в_строку'
]
