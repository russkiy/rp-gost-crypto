Символы_кода_числа = \
	'АБВГҐДЕЄЁЖЗИІЇЙКЛМНОПРСТУЎФХЦЧШЩ' + \
	'ЪЫЬЭЮЯабвгґдеєёжзиіїйклмнопрстуў' + \
	'фхцчшщъыьэюяABCDEFGHIJKLMNOPQRST' + \
	'UVWXYZabcdefghijklmnopqrstuvwxyz'

Функция Из_байтов(данные, длина = Пусто):
# байты в текстовый код из символов набора
	дл = Длина(данные) * 8
	пр = 0
	код = ''
	Для i из Ряд(0, Длина(данные), 7):
		число = 0
		Для j из Ряд(7):
			Если i + j < Длина(данные):
				число += Цел(данные[i + j]) << (8 * j)
			Иначе: Прервать
		Для j из Ряд(8):
			Если пр >= дл: Прервать
			код += Символы_кода_числа[число & 0x7F]
			число >>= 7
			пр += 7
	Если длина != Пусто и длина > Длина(код):
		длина = Цел(длина / 7 * 8) + (1 если длина % 7 != 0 иначе 0)
		код += Символы_кода_числа[0] * (длина - Длина(код))
	Вернуть код

Функция В_байты(код):
# текстовый код из символов набора в байты
	дл = Длина(код) * 7 // 8 * 8
	пр = 0
	байты = БайтМассив()
	Для i из Ряд(0, Длина(код), 8):
		число = 0
		Для j из Ряд(8):
			Если i + j < Длина(код):
				число += Символы_кода_числа.Найти(код[i + j]) << j * 7
			Иначе: Прервать
		Для j из Ряд(8):
			Если пр >= дл: Прервать
			байты.Добавить(число & 0xFF)
			число >>= 8
			пр += 8
	Вернуть Байты(байты)

Функция Из_числа(число, длина = Пусто):
    байты = число.В_байты(
        (число.Длина_в_битах() + 7) // 8 если длина это Пусто иначе длина,
        порядок = 'МлСт'
    )
    Вернуть Из_байтов(байты, длина если длина это не Пусто иначе Пусто)

Функция В_число(код):
    байты = В_байты(код)
    Вернуть Цел.Из_байтов(байты, порядок = 'МлСт')

Функция Числа_в_составной_код(числа, длина):
    байты_всех_чисел = БайтМассив()
    Для число из числа:
        байты_числа = число.В_байты(длина, порядок = 'МлСт')
        байты_всех_чисел.Дополнить(байты_числа)
    Вернуть Из_байтов(байты_всех_чисел, длина * Длина(числа) * 8)

Функция Составной_код_в_числа(код, длина):
    байты_всех_чисел = В_байты(код)
    числа = []
    Для сч из Ряд(0, Длина(байты_всех_чисел), длина):
        байты_числа = байты_всех_чисел[сч : сч + длина]
        Если Длина(байты_числа) == длина:
            число = Цел.Из_байтов(байты_числа, порядок = 'МлСт')
            числа.Добавить(число)
    Вернуть числа

Функция Строку_в_байты(строка):
# строку в байты, один символ в два байта
	Вернуть Байты(строка, 'utf_16le')

Функция Байты_в_строку(байты):
# байты в строку, два байта в один символ
	Вернуть байты.Раскодовать('utf_16le')

__Экспорт__ = [
    'Из_байтов', 'В_байты', 'Из_числа', 'В_число',
    'Числа_в_составной_код', 'Составной_код_в_числа',
    'Строку_в_байты', 'Байты_в_строку'
]
