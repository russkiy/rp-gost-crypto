Функция Установить_источник_случайности(функция):
	Общее Случайное_число
	Случайное_число = функция;

Функция Установить_модуль_хэшевания(модуль):
	Общее Хэшевание
	Хэшевание = модуль

Функция НОД(a, b, к):
	Если a == 0:
		к['x'] = 0; к['y'] = 1
		Вернуть b
	к_ = { 'x': 0, 'y': 0 }
	результат = НОД(b % a, a, к_)
	к['x'] = к_['y'] - (b // a) * к_['x']
	к['y'] = к_['x']
	Вернуть результат

Функция Обратное_по_модулю(a, m):
	к = { 'x': 0, 'y': 0 }
	Если НОД(a, m, к) != 1: Вернуть Пусто
	Иначе: Вернуть (к['x'] % m + m) % m

Функция В_степень_по_модулю(b, e, n):
	Если n == 0: Вернуть Пусто
	АЕсли n == 1: Вернуть 0
	b %= n
	r = 1
	Пока e > 0:
		Если (e & 1) == 1: r = (r * b) % n
		e >>= 1
		b = b ** 2 % n
	Вернуть r

Функция Сложить_точки_ЭК(x1, y1, x2, y2, a, b, p):
	Если x1 == x2 и y1 == y2:
		dy = 3 * x1 ** 2 + a
		dx = 2 * y1
	АЕсли x1 == x2 и y1 == p - y2 % p:
		Вернуть (0, 0)
	Иначе:
		dy = y2 - y1 если y2 > y1 иначе p - (y1 - y2)
		dx = x2 - x1 если x2 > x1 иначе p - (x1 - x2)

	обратное = Обратное_по_модулю(dx, p)
	Если обратное == Пусто: обратное = 0
	лямбда = (dy * обратное) % p
	квадрат = лямбда ** 2

	Если квадрат > x1:
		разница = квадрат - x1
		x3 = (разница - x2) % p если разница > x2 иначе p - (разница + x2) % p
	Иначе:
		x3 = p - (x1 - квадрат + x2) % p

	Если x1 > x3:
		произведение = лямбда * (x1 - x3)
		y3 = (произведение - y1) % p если произведение > y1 иначе p - (произведение + y1) % p
	Иначе:
		y3 = p - (лямбда * (x3 - x1) + y1) % p

	Вернуть (x3, y3)

Функция Умножить_точку_ЭК(x, y, a, b, p, множитель):
	x_ = x; y_ = y
	множитель -= 1
	Пока множитель != 0:
		Если (множитель & 1) != 0:
			сумма = Сложить_точки_ЭК(x_, y_, x, y, a, b, p)
			x_ = сумма[0]; y_ = сумма[1]
		сумма = Сложить_точки_ЭК(x, y, x, y, a, b, p)
		x = сумма[0]; y = сумма[1]
		множитель >>= 1
	Вернуть (x_, y_)

Функция Подписать_данные(h, d, параметры = Пусто):
	Если не параметры: параметры = Наборы_параметров[Параметры_по_умолчанию]
	p, q, a, b, P, дл_х = [параметры[к] для к из ['p', 'q', 'a', 'b', 'P', 'дл_х']]
	Если Тип(h) != Цел: h = Хэшевание.Вычислить(h, дл_х)
	e = h % q
	Если e == 0: e = 1
	Повторять:
		k = Случайное_число(1, q - 1)
		C = Умножить_точку_ЭК(P[0], P[1], a, b, p, k)
		r = C[0] % q
		s = (r * d + k * e) % q
	До s != 0 и r != 0
	Вернуть (r, s)

Функция Проверить_подпись(h, подпись, Q, параметры = Пусто):
	Если не параметры: параметры = Наборы_параметров[Параметры_по_умолчанию]
	p, q, a, b, P, дл_х = [параметры[к] для к из ['p', 'q', 'a', 'b', 'P', 'дл_х']]
	Если Тип(h) != Цел: h = Хэшевание.Вычислить(h, дл_х)
	r, s = подпись
	Если r == 0 или s == 0 или q <= r или q <= s:
		Вернуть Нет
	e = h % q
	Если e == 0: e = 1
	v = Обратное_по_модулю(e, q)
	Если v == Пусто: v = 0
	пр1 = Умножить_точку_ЭК(P[0], P[1], a, b, p, (s * v) % q)
	пр2 = Умножить_точку_ЭК(Q[0], Q[1], a, b, p, q - (r * v) % q)
	C = Сложить_точки_ЭК(пр1[0], пр1[1], пр2[0], пр2[1], a, b, p)
	R = C[0] % q
	Вернуть R == r

Функция Сгенерировать_ключи(параметры = Пусто):
	Если не параметры: параметры = Наборы_параметров[Параметры_по_умолчанию]
	p, q, a, b, P, дл_х = [параметры[к] для к из ['p', 'q', 'a', 'b', 'P', 'дл_х']]
	d = Случайное_число(1, q - 1)
	Q = Умножить_точку_ЭК(P[0], P[1], a, b, p, d)
	Вернуть (d, Q)

Функция Тест_на_простоту(число, ф_случ, повторений):
	Функция Разложить(s):
		t = 0
		Пока s & 1 == 0:
			s >>= 1; t += 1
			Вернуть (s, t)

	Если число == 2 или число == 3: Вернуть Да
	АЕсли число < 2 или число & 1 == 0: Вернуть Нет
	Иначе:
		t, s = Разложить(число - 1)
		Для i из Ряд(повторений):
			x = В_степень_по_модулю(ф_случ(), t, число)
			Если x == 1 или x == число - 1: Продолжить
			Для j из Ряд(s - 1):
				x = В_степень_по_модулю(x, 2, число)
				Если x == 1: Вернуть Нет
				АЕсли x == число - 1: Прервать
			Если x != число - 1: Вернуть Нет
		Вернуть Да

Функция Проверить_параметры(ключи, параметры):
	d, Q = ключи
	p, q, a, b, P, дл_х = [параметры[к] для к из ['p', 'q', 'a', 'b', 'P', 'дл_х']]
	Q_x, Q_y = Q; P_x, P_y = P
	результат = []
	длина_хэша = 512 если дл_х иначе 256
	m = q
	Если 4 > p: результат.Добавить("Слишком малое число p.")
	Если p <= a или p <= b: результат.Добавить("Число a или b не принадлежит F_p.")
	a_3_4 = 4 * a ** 3; b_2_27 = 27 * b ** 2
	Если (a_3_4 + b_2_27) % p == 0: результат.Добавить("4a^3+27b^2 сравнимо по модулю p с нулём.")
	дл_q = q.Длина_в_битах()
	Если дл_q < длина_хэша - (длина_хэша / 128) или дл_q > длина_хэша: результат.Добавить("Число q неверной длины.")
	Если P_x == 0 и P_y == 0: результат.Добавить("P равно O.")
	qP = Умножить_точку_ЭК(P_x, P_y, a, b, p, q)
	Если qP[0] != 0 или qP[1] != 0: результат.Добавить("qP не равно O.")
	dP = Умножить_точку_ЭК(P_x, P_y, a, b, p, d)
	Если dP[0] != Q_x или dP[1] != Q_y: результат.Добавить("Q не равно dP.")
	Если q <= d или d == 0: результат.Добавить("Число d неверного размера.")
	B = 31 если длина_хэша == 256 иначе 131
	равно_1 = Нет
	Для t из Ряд(1, B + 1):
		Если В_степень_по_модулю(p, t, q) == 1:
			равно_1 = Да; Прервать
	Если равно_1: результат.Добавить("P^t (mod q) равно 1.")
	Если m % q != 0: результат.Добавить("n не принадлежит Z.");
	Если m == p: результат.Добавить("m равно p.")
	обратное = Обратное_по_модулю(a_3_4 + b_2_27, p)
	Если обратное == Пусто: обратное = 0
	J_E = (1728 * a_3_4 * обратное) % p
	Если J_E == 0 или J_E == 1728: результат.Добавить("J_E равно 0 или 1728.")
	Если (P_y * P_y) % p != (P_x ** 3 + a * P_x + b) % p: результат.Добавить("P_y не соответствует P_x.")
	Если (Q_y * Q_y) % p != (Q_x ** 3 + a * Q_x + b) % p: результат.Добавить("Q_y не соответствует Q_x.")
	Если не Тест_на_простоту(p, фун: Случайное_число(1, p - 1), 50):
		результат.Добавить("p не простое число.")
	Если не Тест_на_простоту(q, фун: Случайное_число(1, q - 1), 50):
		результат.Добавить("q не простое число.")
	Вернуть " ".Сцепить(результат)

Функция Согласование_ключей(
	ключи, параметры = Пусто, доп_множ = 1, нужен_дл_х = Пусто
):
	d, Q = ключи
	Если не параметры: параметры = Наборы_параметров[Параметры_по_умолчанию]
	p, q, a, b, P, дл_х = [параметры[к] для к из ['p', 'q', 'a', 'b', 'P', 'дл_х']]
	ключ = Умножить_точку_ЭК(Q[0], Q[1], a, b, p, d)
	Если доп_множ != 1:
		ключ = Умножить_точку_ЭК(ключ[0], ключ[1], a, b, p, доп_множ)
	ключ = Список(ключ); массив = []
	Для сч из Ряд(128 если дл_х иначе 64):
		i = 0 если сч < (64 если дл_х иначе 32) иначе 1
		массив.Добавить(ключ[i] & 0xFF)
		ключ[i] >>= 8
	Если нужен_дл_х == Пусто: нужен_дл_х = дл_х
	массив.Обратить()
	Вернуть Хэшевание.Вычислить(массив, нужен_дл_х)

Функция Сгенерировать_параметр_согласования(длинный_ключ = Нет, длинный_параметр = Нет):
	Вернуть Случайное_число(
		1,
		1 << (
			(256 если длинный_ключ иначе 128) если длинный_параметр \
			иначе (128 если длинный_ключ иначе 64)
		) - 1
	)

Параметры_по_умолчанию = 4

Наборы_параметров = (
	{ # [0] GostR3410-2001-ParamSet-CC
		'p': 0xC0000000000000000000000000000000000000000000000000000000000003C7,
		'q': 0x5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF606117A2F4BDE428B7458A54B6E87B85,
		'a': 0xC0000000000000000000000000000000000000000000000000000000000003C4,
		'b': 0x2D06B4265EBC749FF7D0F1F1F88232E81632E9088FD44B7787D5E407E955080C,
		'P': (
			0x0000000000000000000000000000000000000000000000000000000000000002,
			0xA20E034BF8813EF5C18D01105E726A17EB248B264AE9706F440BEDC8CCB6B22C
		),
		'дл_х': Нет
	},
	{ # [1] GostR3410-2001-TestParamSet
		'p': 0x8000000000000000000000000000000000000000000000000000000000000431,
		'q': 0x8000000000000000000000000000000150FE8A1892976154C59CFC193ACCF5B3,
		'a': 0x0000000000000000000000000000000000000000000000000000000000000007,
		'b': 0x5FBFF498AA938CE739B8E022FBAFEF40563F6E6A3472FC2A514C0CE9DAE23B7E,
		'P': (
			0x0000000000000000000000000000000000000000000000000000000000000002,
			0x08E2A8A0E65147D4BD6316030E16D19C85C97F0A9CA267122B96ABBCEA7E8FC8
		),
		'дл_х': Нет
	},
	{ # [2] GostR3410-2001-CryptoPro-A-ParamSet
		'p': 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD97,
		'q': 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6C611070995AD10045841B09B761B893,
		'a': 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD94,
		'b': 0x00000000000000000000000000000000000000000000000000000000000000A6,
		'P': (
			0x0000000000000000000000000000000000000000000000000000000000000001,
			0x8D91E471E0989CDA27DF505A453F2B7635294F2DDF23E3B122ACC99C9E9F1E14
		),
		'дл_х': Нет
	},
	{ # [3] GostR3410-2001-CryptoPro-B-ParamSet
		'p': 0x8000000000000000000000000000000000000000000000000000000000000C99,
		'q': 0x800000000000000000000000000000015F700CFFF1A624E5E497161BCC8A198F,
		'a': 0x8000000000000000000000000000000000000000000000000000000000000C96,
		'b': 0x3E1AF419A269A5F866A7D3C25C3DF80AE979259373FF2B182F49D4CE7E1BBC8B,
		'P': (
			0x0000000000000000000000000000000000000000000000000000000000000001,
			0x3FA8124359F96680B83D1C3EB2C070E5C545C9858D03ECFB744BF8D717717EFC
		),
		'дл_х': Нет
	},
	{ # [4] GostR3410-2001-CryptoPro-C-ParamSet
		'p': 0x9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D759B,
		'q': 0x9B9F605F5A858107AB1EC85E6B41C8AA582CA3511EDDFB74F02F3A6598980BB9,
		'a': 0x9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D7598,
		'b': 0x000000000000000000000000000000000000000000000000000000000000805A,
		'P': (
			0x0000000000000000000000000000000000000000000000000000000000000000,
			0x41ECE55743711A8C3CBF3783CD08C0EE4D4DC440D4641A8F366E550DFDB3BB67
		),
		'дл_х': Нет
	},
	{ # [5] tc26-gost-3410-12-256-paramSetA
		'p': 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD97,
		'q': 0x400000000000000000000000000000000FD8CDDFC87B6635C115AF556C360C67,
		'a': 0xC2173F1513981673AF4892C23035A27CE25E2013BF95AA33B22C656F277E7335,
		'b': 0x295F9BAE7428ED9CCC20E7C359A9D41A22FCCD9108E17BF7BA9337A6F8AE9513,
		'P': (
			0x91E38443A5E82C0D880923425712B2BB658B9196932E02C78B2582FE742DAA28,
			0x32879423AB1A0375895786C4BB46E9565FDE0B5344766740AF268ADB32322E5C
		),
		'дл_х': Нет
	},
	{ # [6] tc26-gost-3410-12-512-paramSetTest
		'p': 0x4531ACD1FE0023C7550D267B6B2FEE80922B14B2FFB90F04D4EB7C09B5D2D15DF1D852741AF4704A0458047E80E4546D35B8336FAC224DD81664BBF528BE6373,
		'q': 0x4531ACD1FE0023C7550D267B6B2FEE80922B14B2FFB90F04D4EB7C09B5D2D15DA82F2D7ECB1DBAC719905C5EECC423F1D86E25EDBE23C595D644AAF187E6E6DF,
		'a': 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007,
		'b': 0x1CFF0806A31116DA29D8CFA54E57EB748BC5F377E49400FDD788B649ECA1AC4361834013B2AD7322480A89CA58E0CF74BC9E540C2ADD6897FAD0A3084F302ADC,
		'P': (
			0x24D19CC64572EE30F396BF6EBBFD7A6C5213B3B3D7057CC825F91093A68CD762FD60611262CD838DC6B60AA7EEE804E28BC849977FAC33B4B530F1B120248A9A,
			0x2BB312A43BD2CE6E0D020613C857ACDDCFBF061E91E5F2C3F32447C259F39B2C83AB156D77F1496BF7EB3351E1EE4E43DC1A18B91B24640B6DBB92CB1ADD371E
		),
		'дл_х': Да
	},
	{ # [7] tc26-gost-3410-12-512-paramSetA
		'p': 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC7,
		'q': 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27E69532F48D89116FF22B8D4E0560609B4B38ABFAD2B85DCACDB1411F10B275,
		'a': 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC4,
		'b': 0xE8C2505DEDFC86DDC1BD0B2B6667F1DA34B82574761CB0E879BD081CFD0B6265EE3CB090F30D27614CB4574010DA90DD862EF9D4EBEE4761503190785A71C760,
		'P': (
			0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003,
			0x7503CFE87A836AE3A61B8816E25450E6CE5E1C93ACF1ABC1778064FDCBEFA921DF1626BE4FD036E93D75E6A50E3A41E98028FE5FC235F5B889A589CB5215F2A4
		),
		'дл_х': Да
	},
	{ # [8] tc26-gost-3410-12-512-paramSetB
		'p': 0x8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006F,
		'q': 0x800000000000000000000000000000000000000000000000000000000000000149A1EC142565A545ACFDB77BD9D40CFA8B996712101BEA0EC6346C54374F25BD,
		'a': 0x8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006C,
		'b': 0x687D1B459DC841457E3E06CF6F5E2517B97C7D614AF138BCBF85DC806C4B289F3E965D2DB1416D217F8B276FAD1AB69C50F78BEE1FA3106EFB8CCBC7C5140116,
		'P': (
			0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002,
			0x1A8F7EDA389B094C2C071E3647A8940F3C123B697578C213BE6DD9E6C8EC7335DCB228FD1EDF4A39152CBCAAF8C0398828041055F94CEEEC7E21340780FE41BD
		),
		'дл_х': Да
	},
	{ # [9] tc26-gost-3410-12-512-paramSetC
		'p': 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC7,
		'q': 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC98CDBA46506AB004C33A9FF5147502CC8EDA9E7A769A12694623CEF47F023ED,
		'a': 0xDC9203E514A721875485A529D2C722FB187BC8980EB866644DE41C68E143064546E861C0E2C9EDD92ADE71F46FCF50FF2AD97F951FDA9F2A2EB6546F39689BD3,
		'b': 0xB4C4EE28CEBC6C2C8AC12952CF37F16AC7EFB6A9F69F4B57FFDA2E4F0DE5ADE038CBC2FFF719D2C18DE0284B8BFEF3B52B8CC7A5F5BF0A3C8D2319A5312557E1,
		'P': (
			0xE2E31EDFC23DE7BDEBE241CE593EF5DE2295B7A9CBAEF021D385F7074CEA043AA27272A7AE602BF2A7B9033DB9ED3610C6FB85487EAE97AAC5BC7928C1950148,
			0xF5CE40D95B5EB899ABBCCFF5911CB8577939804D6527378B8C108C3D2090FF9BE18E2D33E3021ED2EF32D85822423B6304F726AA854BAE07D0396E9A9ADDC40F
		),
		'дл_х': Да
	}
)
