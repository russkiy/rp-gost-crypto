A = (
	(0x8E20, 0xFAA7, 0x2BA0, 0xB470), (0x4710, 0x7DDD, 0x9B50, 0x5A38), (0xAD08, 0xB0E0, 0xC328, 0x2D1C), (0xD804, 0x5870, 0xEF14, 0x980E),
	(0x6C02, 0x2C38, 0xF90A, 0x4C07), (0x3601, 0x161C, 0xF205, 0x268D), (0x1B8E, 0x0B0E, 0x798C, 0x13C8), (0x8347, 0x8B07, 0xB246, 0x8764),
	(0xA011, 0xD380, 0x818E, 0x8F40), (0x5086, 0xE740, 0xCE47, 0xC920), (0x2843, 0xFD20, 0x67AD, 0xEA10), (0x14AF, 0xF010, 0xBDD8, 0x7508),
	(0x0AD9, 0x7808, 0xD06C, 0xB404), (0x05E2, 0x3C04, 0x6836, 0x5A02), (0x8C71, 0x1E02, 0x341B, 0x2D01), (0x46B6, 0x0F01, 0x1A83, 0x988E),
	(0x90DA, 0xB52A, 0x387A, 0xE76F), (0x486D, 0xD415, 0x1C3D, 0xFDB9), (0x24B8, 0x6A84, 0x0E90, 0xF0D2), (0x125C, 0x3542, 0x0748, 0x7869),
	(0x092E, 0x9421, 0x8D24, 0x3CBA), (0x8A17, 0x4A9E, 0xC812, 0x1E5D), (0x4585, 0x254F, 0x6409, 0x0FA0), (0xACCC, 0x9CA9, 0x328A, 0x8950),
	(0x9D4D, 0xF05D, 0x5F66, 0x1451), (0xC0A8, 0x78A0, 0xA133, 0x0AA6), (0x6054, 0x3C50, 0xDE97, 0x0553), (0x302A, 0x1E28, 0x6FC5, 0x8CA7),
	(0x1815, 0x0F14, 0xB9EC, 0x46DD), (0x0C84, 0x890A, 0xD276, 0x23E0), (0x0642, 0xCA05, 0x693B, 0x9F70), (0x0321, 0x658C, 0xBA93, 0xC138),
	(0x8627, 0x5DF0, 0x9CE8, 0xAAA8), (0x439D, 0xA078, 0x4E74, 0x5554), (0xAFC0, 0x503C, 0x273A, 0xA42A), (0xD960, 0x281E, 0x9D1D, 0x5215),
	(0xE230, 0x140F, 0xC080, 0x2984), (0x7118, 0x0A89, 0x6040, 0x9A42), (0xB60C, 0x05CA, 0x3020, 0x4D21), (0x5B06, 0x8C65, 0x1810, 0xA89E),
	(0x456C, 0x3488, 0x7A38, 0x05B9), (0xAC36, 0x1A44, 0x3D1C, 0x8CD2), (0x561B, 0x0D22, 0x900E, 0x4669), (0x2B83, 0x8811, 0x4807, 0x23BA),
	(0x9BCF, 0x4486, 0x248D, 0x9F5D), (0xC3E9, 0x2243, 0x12C8, 0xC1A0), (0xEFFA, 0x11AF, 0x0964, 0xEE50), (0xF97D, 0x86D9, 0x8A32, 0x7728),
	(0xE4FA, 0x2054, 0xA80B, 0x329C), (0x727D, 0x102A, 0x548B, 0x194E), (0x39B0, 0x0815, 0x2ACB, 0x8227), (0x9258, 0x0484, 0x15EB, 0x419D),
	(0x492C, 0x0242, 0x84FB, 0xAEC0), (0xAA16, 0x0121, 0x42F3, 0x5760), (0x550B, 0x8E9E, 0x21F7, 0xA530), (0xA48B, 0x474F, 0x9EF5, 0xDC18),
	(0x70A6, 0xA56E, 0x2440, 0x598E), (0x3853, 0xDC37, 0x1220, 0xA247), (0x1CA7, 0x6E95, 0x0910, 0x51AD), (0x0EDD, 0x37C4, 0x8A08, 0xA6D8),
	(0x07E0, 0x9562, 0x4504, 0x536C), (0x8D70, 0xC431, 0xAC02, 0xA736), (0xC838, 0x6296, 0x5601, 0xDD1B), (0x641C, 0x314B, 0x2B8E, 0xE083)
)

Пи = (
	0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
	0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
	0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
	0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
	0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
	0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
	0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
	0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
	0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
	0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
	0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
	0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
	0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
	0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
	0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
	0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6
)

Тау = (
	0, 8, 16, 24, 32, 40, 48, 56,
	1, 9, 17, 25, 33, 41, 49, 57,
	2, 10, 18, 26, 34, 42, 50, 58,
	3, 11, 19, 27, 35, 43, 51, 59,
	4, 12, 20, 28, 36, 44, 52, 60,
	5, 13, 21, 29, 37, 45, 53, 61,
	6, 14, 22, 30, 38, 46, 54, 62,
	7, 15, 23, 31, 39, 47, 55, 63
)

C = (
	(
		0xB1, 0x08, 0x5B, 0xDA, 0x1E, 0xCA, 0xDA, 0xE9, 0xEB, 0xCB, 0x2F, 0x81, 0xC0, 0x65, 0x7C, 0x1F, 
		0x2F, 0x6A, 0x76, 0x43, 0x2E, 0x45, 0xD0, 0x16, 0x71, 0x4E, 0xB8, 0x8D, 0x75, 0x85, 0xC4, 0xFC, 
		0x4B, 0x7C, 0xE0, 0x91, 0x92, 0x67, 0x69, 0x01, 0xA2, 0x42, 0x2A, 0x08, 0xA4, 0x60, 0xD3, 0x15, 
		0x05, 0x76, 0x74, 0x36, 0xCC, 0x74, 0x4D, 0x23, 0xDD, 0x80, 0x65, 0x59, 0xF2, 0xA6, 0x45, 0x07
	), 
	(
		0x6F, 0xA3, 0xB5, 0x8A, 0xA9, 0x9D, 0x2F, 0x1A, 0x4F, 0xE3, 0x9D, 0x46, 0x0F, 0x70, 0xB5, 0xD7, 
		0xF3, 0xFE, 0xEA, 0x72, 0x0A, 0x23, 0x2B, 0x98, 0x61, 0xD5, 0x5E, 0x0F, 0x16, 0xB5, 0x01, 0x31, 
		0x9A, 0xB5, 0x17, 0x6B, 0x12, 0xD6, 0x99, 0x58, 0x5C, 0xB5, 0x61, 0xC2, 0xDB, 0x0A, 0xA7, 0xCA, 
		0x55, 0xDD, 0xA2, 0x1B, 0xD7, 0xCB, 0xCD, 0x56, 0xE6, 0x79, 0x04, 0x70, 0x21, 0xB1, 0x9B, 0xB7
	), 
	(
		0xF5, 0x74, 0xDC, 0xAC, 0x2B, 0xCE, 0x2F, 0xC7, 0x0A, 0x39, 0xFC, 0x28, 0x6A, 0x3D, 0x84, 0x35, 
		0x06, 0xF1, 0x5E, 0x5F, 0x52, 0x9C, 0x1F, 0x8B, 0xF2, 0xEA, 0x75, 0x14, 0xB1, 0x29, 0x7B, 0x7B, 
		0xD3, 0xE2, 0x0F, 0xE4, 0x90, 0x35, 0x9E, 0xB1, 0xC1, 0xC9, 0x3A, 0x37, 0x60, 0x62, 0xDB, 0x09, 
		0xC2, 0xB6, 0xF4, 0x43, 0x86, 0x7A, 0xDB, 0x31, 0x99, 0x1E, 0x96, 0xF5, 0x0A, 0xBA, 0x0A, 0xB2
	), 
	(
		0xEF, 0x1F, 0xDF, 0xB3, 0xE8, 0x15, 0x66, 0xD2, 0xF9, 0x48, 0xE1, 0xA0, 0x5D, 0x71, 0xE4, 0xDD, 
		0x48, 0x8E, 0x85, 0x7E, 0x33, 0x5C, 0x3C, 0x7D, 0x9D, 0x72, 0x1C, 0xAD, 0x68, 0x5E, 0x35, 0x3F, 
		0xA9, 0xD7, 0x2C, 0x82, 0xED, 0x03, 0xD6, 0x75, 0xD8, 0xB7, 0x13, 0x33, 0x93, 0x52, 0x03, 0xBE, 
		0x34, 0x53, 0xEA, 0xA1, 0x93, 0xE8, 0x37, 0xF1, 0x22, 0x0C, 0xBE, 0xBC, 0x84, 0xE3, 0xD1, 0x2E
	), 
	(
		0x4B, 0xEA, 0x6B, 0xAC, 0xAD, 0x47, 0x47, 0x99, 0x9A, 0x3F, 0x41, 0x0C, 0x6C, 0xA9, 0x23, 0x63, 
		0x7F, 0x15, 0x1C, 0x1F, 0x16, 0x86, 0x10, 0x4A, 0x35, 0x9E, 0x35, 0xD7, 0x80, 0x0F, 0xFF, 0xBD, 
		0xBF, 0xCD, 0x17, 0x47, 0x25, 0x3A, 0xF5, 0xA3, 0xDF, 0xFF, 0x00, 0xB7, 0x23, 0x27, 0x1A, 0x16, 
		0x7A, 0x56, 0xA2, 0x7E, 0xA9, 0xEA, 0x63, 0xF5, 0x60, 0x17, 0x58, 0xFD, 0x7C, 0x6C, 0xFE, 0x57
	), 
	(
		0xAE, 0x4F, 0xAE, 0xAE, 0x1D, 0x3A, 0xD3, 0xD9, 0x6F, 0xA4, 0xC3, 0x3B, 0x7A, 0x30, 0x39, 0xC0, 
		0x2D, 0x66, 0xC4, 0xF9, 0x51, 0x42, 0xA4, 0x6C, 0x18, 0x7F, 0x9A, 0xB4, 0x9A, 0xF0, 0x8E, 0xC6, 
		0xCF, 0xFA, 0xA6, 0xB7, 0x1C, 0x9A, 0xB7, 0xB4, 0x0A, 0xF2, 0x1F, 0x66, 0xC2, 0xBE, 0xC6, 0xB6, 
		0xBF, 0x71, 0xC5, 0x72, 0x36, 0x90, 0x4F, 0x35, 0xFA, 0x68, 0x40, 0x7A, 0x46, 0x64, 0x7D, 0x6E
	), 
	(
		0xF4, 0xC7, 0x0E, 0x16, 0xEE, 0xAA, 0xC5, 0xEC, 0x51, 0xAC, 0x86, 0xFE, 0xBF, 0x24, 0x09, 0x54, 
		0x39, 0x9E, 0xC6, 0xC7, 0xE6, 0xBF, 0x87, 0xC9, 0xD3, 0x47, 0x3E, 0x33, 0x19, 0x7A, 0x93, 0xC9, 
		0x09, 0x92, 0xAB, 0xC5, 0x2D, 0x82, 0x2C, 0x37, 0x06, 0x47, 0x69, 0x83, 0x28, 0x4A, 0x05, 0x04, 
		0x35, 0x17, 0x45, 0x4C, 0xA2, 0x3C, 0x4A, 0xF3, 0x88, 0x86, 0x56, 0x4D, 0x3A, 0x14, 0xD4, 0x93
	), 
	(
		0x9B, 0x1F, 0x5B, 0x42, 0x4D, 0x93, 0xC9, 0xA7, 0x03, 0xE7, 0xAA, 0x02, 0x0C, 0x6E, 0x41, 0x41, 
		0x4E, 0xB7, 0xF8, 0x71, 0x9C, 0x36, 0xDE, 0x1E, 0x89, 0xB4, 0x44, 0x3B, 0x4D, 0xDB, 0xC4, 0x9A, 
		0xF4, 0x89, 0x2B, 0xCB, 0x92, 0x9B, 0x06, 0x90, 0x69, 0xD1, 0x8D, 0x2B, 0xD1, 0xA5, 0xC4, 0x2F, 
		0x36, 0xAC, 0xC2, 0x35, 0x59, 0x51, 0xA8, 0xD9, 0xA4, 0x7F, 0x0D, 0xD4, 0xBF, 0x02, 0xE7, 0x1E
	), 
	(
		0x37, 0x8F, 0x5A, 0x54, 0x16, 0x31, 0x22, 0x9B, 0x94, 0x4C, 0x9A, 0xD8, 0xEC, 0x16, 0x5F, 0xDE, 
		0x3A, 0x7D, 0x3A, 0x1B, 0x25, 0x89, 0x42, 0x24, 0x3C, 0xD9, 0x55, 0xB7, 0xE0, 0x0D, 0x09, 0x84, 
		0x80, 0x0A, 0x44, 0x0B, 0xDB, 0xB2, 0xCE, 0xB1, 0x7B, 0x2B, 0x8A, 0x9A, 0xA6, 0x07, 0x9C, 0x54, 
		0x0E, 0x38, 0xDC, 0x92, 0xCB, 0x1F, 0x2A, 0x60, 0x72, 0x61, 0x44, 0x51, 0x83, 0x23, 0x5A, 0xDB
	), 
	(
		0xAB, 0xBE, 0xDE, 0xA6, 0x80, 0x05, 0x6F, 0x52, 0x38, 0x2A, 0xE5, 0x48, 0xB2, 0xE4, 0xF3, 0xF3, 
		0x89, 0x41, 0xE7, 0x1C, 0xFF, 0x8A, 0x78, 0xDB, 0x1F, 0xFF, 0xE1, 0x8A, 0x1B, 0x33, 0x61, 0x03, 
		0x9F, 0xE7, 0x67, 0x02, 0xAF, 0x69, 0x33, 0x4B, 0x7A, 0x1E, 0x6C, 0x30, 0x3B, 0x76, 0x52, 0xF4, 
		0x36, 0x98, 0xFA, 0xD1, 0x15, 0x3B, 0xB6, 0xC3, 0x74, 0xB4, 0xC7, 0xFB, 0x98, 0x45, 0x9C, 0xED
	), 
	(
		0x7B, 0xCD, 0x9E, 0xD0, 0xEF, 0xC8, 0x89, 0xFB, 0x30, 0x02, 0xC6, 0xCD, 0x63, 0x5A, 0xFE, 0x94, 
		0xD8, 0xFA, 0x6B, 0xBB, 0xEB, 0xAB, 0x07, 0x61, 0x20, 0x01, 0x80, 0x21, 0x14, 0x84, 0x66, 0x79, 
		0x8A, 0x1D, 0x71, 0xEF, 0xEA, 0x48, 0xB9, 0xCA, 0xEF, 0xBA, 0xCD, 0x1D, 0x7D, 0x47, 0x6E, 0x98, 
		0xDE, 0xA2, 0x59, 0x4A, 0xC0, 0x6F, 0xD8, 0x5D, 0x6B, 0xCA, 0xA4, 0xCD, 0x81, 0xF3, 0x2D, 0x1B
	), 
	(
		0x37, 0x8E, 0xE7, 0x67, 0xF1, 0x16, 0x31, 0xBA, 0xD2, 0x13, 0x80, 0xB0, 0x04, 0x49, 0xB1, 0x7A, 
		0xCD, 0xA4, 0x3C, 0x32, 0xBC, 0xDF, 0x1D, 0x77, 0xF8, 0x20, 0x12, 0xD4, 0x30, 0x21, 0x9F, 0x9B, 
		0x5D, 0x80, 0xEF, 0x9D, 0x18, 0x91, 0xCC, 0x86, 0xE7, 0x1D, 0xA4, 0xAA, 0x88, 0xE1, 0x28, 0x52, 
		0xFA, 0xF4, 0x17, 0xD5, 0xD9, 0xB2, 0x1B, 0x99, 0x48, 0xBC, 0x92, 0x4A, 0xF1, 0x1B, 0xD7, 0x20
	)
)

Функция Сложить_по_модулю_512(a, b):
	c = [0] * 64
	t = 0
	Для i из Ряд(63, -1, -1):
		t = a[i] + b[i] + (t >> 8)
		c[i] = t & 0xFF
	Вернуть c

Функция X(a, b):
	c = []
	Для i из Ряд(64):
		c.Добавить(a[i] ^ b[i])
	Вернуть c

Функция S(значение):
	Для i из Ряд(64):
		значение[i] = Пи[значение[i]]
	Вернуть значение

Функция P(значение):
	t = []
	Для i из Ряд(64):
		t.Добавить(значение[Тау[i]])
	Вернуть t

Функция L(значение):
	Для i из Ряд(8):
		V = [0, 0, 0, 0]
		Для k из Ряд(8):
			Для j из Ряд(8):
				Если (значение[i * 8 + k] & (1 << (7 - j))) != 0:
					Для l из Ряд(4):
						V[l] ^= A[k * 8 + j][l]
		Для k из Ряд(8):
			значение[i * 8 + k] = (V[k >> 1] & (0xff << (1 - (k & 1)) * 8)) >> (1 - (k & 1)) * 8
	Вернуть значение

Функция E(K, m):
	значение = X(m, K)
	Для i из Ряд(12):
		значение = S(значение)
		значение = P(значение)
		значение = L(значение)
		K = X(K, C[i])
		K = S(K)
		K = P(K)
		K = L(K)
		значение = X(значение, K)
	Вернуть значение

Функция g_N(N, h, m):
	K = X(N, h)
	K = S(K)
	K = P(K)
	K = L(K)
	t = E(K, m)
	t = X(t, h)
	Вернуть X(t, m)

Функция H(IV, M):
	V_0 = БайтМассив(b'\x00' * 64)
	V_512 = V_0[:]
	V_512[62] = 0x02
	Сигма = V_0[:]
	N = V_0[:]
	m = [0] * 64
	h = IV
	длина = Длина(M) * 8
	Пока длина >= 512:
		Для i из Ряд(64):
			m[i] = M[i + (длина >> 3) - 63 - ((длина & 0x7) == 0)]
		h = g_N(N, h, m)
		N = Сложить_по_модулю_512(N, V_512)
		Сигма = Сложить_по_модулю_512(Сигма, m)
		длина -= 512
	m = V_0[:]
	Для i из Ряд((длина >> 3) + 1 - ((длина & 0x7) == 0)):
		m[i + 63 - (длина >> 3) + ((длина & 0x7) == 0)] = M[i]
	m[63 - (длина >> 3)] |= (1 << (длина & 0x7))
	h = g_N(N, h, m)
	V_512[63] = длина & 0xFF
	V_512[62] = длина >> 8
	N = Сложить_по_модулю_512(N, V_512)
	Сигма = Сложить_по_модулю_512(Сигма, m)
	Вернуть g_N(V_0, g_N(V_0, h, N), Сигма)

Функция Хэш_512(сообщение):
	хэш = H(БайтМассив(b'\x00' * 64), сообщение);
	число = 0
	Для порядок, разряд из Перечислить(хэш):
		число += разряд << 8 * (63 - порядок)
	Вернуть число

Функция Хэш_256(сообщение):
	хэш = H(БайтМассив(b'\x01' * 64), сообщение)[0 : 32]
	число = 0
	Для порядок, разряд из Перечислить(хэш):
		число += разряд << 8 * (31 - порядок)
	Вернуть число

Функция Вычислить(
	данные, # текст (байты)
	длинный = Нет # длинный (512 битов) или короткий (256 битов) (логическое)
): # возвращает хэш (целое число)
	данные = БайтМассив(данные)
	Вернуть Хэш_512(данные) если длинный иначе Хэш_256(данные)

__Экспорт__ = [
	'Вычислить'
]
