Из .Алгоритмы подключить Шифр
Из .Алгоритмы подключить Хэш
Из .Алгоритмы подключить ЭЦП
Из . подключить Код
Подключить Случ

Функция Подготовить_текст(текст):
	результат = Список()
	Для i из Ряд(Длина(текст)):
		c = Код_символа(текст[i])
		Если c > 1024:
			Если c == 1025: c = 1016
			АЕсли c == 1105: c = 1032
			результат.Добавить(c - 848)
		Иначе: результат.Добавить(c)
	результат.Обратить()
	Вернуть БайтМассив(результат)

Проверочные_векторы = (
	{   # Шифрование ГОСТ 28147-89
		'вход': БайтМассив([0, 0, 0, 0, 0, 0, 0, 0]),
		'выход': БайтМассив([0x1B, 0x0B, 0xBC, 0x32, 0xCE, 0xBC, 0xAB, 0x42]),
		'ключ': (
			0x33206D54, 0x326C6568, 0x20657369, 0x626E7373,
			0x79676120, 0x74746769, 0x65686573, 0x733D2C20
		),
		'таблица': 6
	},
	{   # Хэшевание ГОСТ Р 34.11-2012
		'вход': 'Се ветри, Стрибожи внуци, веютъ с моря стрелами на храбрыя плъкы Игоревы',
		'выход_1': 0x508F7E553C06501D749A66FC28C6CAC0B005746D97537FA85D9E40904EFED29D,
		'выход_2': 0x28FBC9BADA033B1460642BDCDDB90C3FB3E56C497CCD0F62B8A2AD4935E85F037613966DE4EE00531AE60F3B5A47F8DAE06915D5F2F194996FCABF2622E6881E
	},
	{   # ЭЦП ГОСТ Р 34.10-2018
		'параметры': 1,
		'h': 0x2DFBC1B372D89A1188C09C52E0EEC61FCE52032AB1022E8E67ECE6672B043EE5,
		'd': 0x7A929ADE789BB9BE10ED359DD39A72C11B60961F49397EEE1D19CE9891EC3B28,
		'Q': (
			0x7F2B49E270DB6D90D8595BEC458B50C58585BA1D4E9B788F6689DBD8E56FD80B,
			0x26F1B489D6701DD185C8413A977B3CBBAF64D1C593D26627DFFB101A87FF77DA
		),
		'k': 0x77105C9B20BCD3122823C8CF6FCC7B956DE33814E95B7FE64FED924594DCEAB3,
		'подпись': (
			0x41AA28D2F1AB148280CD9ED56FEDA41974053554A42767B83AD043FD39DC0493,
			0x01456C64BA4642A1653C235A98A60249BCD6D3F746B631DF928014F6C5BF9C40
		)
	},
	{   # Р 50.1.113-2016
		'параметры': 7,
		'UKM': 0x27C744853C60801D,
		'A_закр': 0x67B63CA4AC8D2BB32618D89296C7476DBEB9F9048496F202B1902CF2CE41DBC2F847712D960483458D4B380867F426C7CA0FF5782702DBC44EE8FC72D9EC90C9,
		'A_откр': (
			0xA7C0ADB12743C10C3C1BEB97C8F631242F7937A1DEB6BCE5E664E49261BACCD3F5DC56EC53B2ABB90CA1EB703078BA546655A8B99F79188D2021FFABA4EDB0AA,
			0x5ADB1C63A4E4465E0BBEFD897FB9016475934CFA0F8C95F992EA402D47921F46382D00481B720314B19D8C878E75D81B9763358DD304B2ED3A364E07A3134691
		),
		'B_закр': 0xDBD09213A592DA5BBFD8ED068CCCCCBBFBEDA4FEAC96B9B4908591440B0714803B9EB763EF932266D4C0181A9B73EACF9013EFC65EC07C888515F1B6F759C848,
		'B_откр': (
			0x51A6D54EE932D176E87591121CCE5F395CB2F2F147114D95F463C8A7ED74A9FC5ECD2325A35FB6387831EA66BC3D2AA42EDE35872CC75372073A71B983E12F19,
			0x793BDE5BF72840AD22B02A363AE4772D4A52FC08BA1A20F7458A222A13BF98B53BE002D1973F1E398CE46C17DA6D00D9B6D0076F8284DCC42E599B4C413B8804
		),
		'KEK': 0x21C236EFC054C082056748A65FA9CE2C19E2476FCE2DD79E55CCE22073A7A9C9
	}
)

Функция Выполнить():
	Вывести('=== Шифрование ===')

	Вывести('* Режим простой замены:')
	Если Шифр.Простая_замена(
		Шифр.Простая_замена(Код.Строку_в_байты('Проверка'), Проверочные_векторы[0]['ключ'], Пусто, Нет),
		Проверочные_векторы[0]['ключ'], Пусто, Да
	) == Код.Строку_в_байты('Проверка'):
		Вывести('  успешно.')
	Иначе:
		Вывести('  ошибка.')

	Вывести('* Режим гаммования:')
	Если Шифр.Гаммование(
		Шифр.Гаммование(Код.Строку_в_байты('Проверка...'), Проверочные_векторы[0]['ключ'], Пусто, [0x508F7E55, 0x28FBC9BA]),
		Проверочные_векторы[0]['ключ'], Пусто, [0x508F7E55, 0x28FBC9BA]
	) == Код.Строку_в_байты('Проверка...'):
		Вывести('  успешно.')
	Иначе:
		Вывести('  ошибка.')

	Вывести('* Режим гаммования с обратной связью:')
	Если Шифр.Гаммование_с_обратной_связью(
		Шифр.Гаммование_с_обратной_связью(Код.Строку_в_байты('Проверка...'), Проверочные_векторы[0]['ключ'], Пусто, [0x508F7E55, 0x28FBC9BA], Нет),
		Проверочные_векторы[0]['ключ'], Пусто, [0x508F7E55, 0x28FBC9BA], Да
	) == Код.Строку_в_байты('Проверка...'):
		Вывести('  успешно.')
	Иначе:
		Вывести('  ошибка.')

	Вывести('* Проверочный вектор:')
	Если Шифр.Простая_замена(
		Проверочные_векторы[0]['вход'],
		Проверочные_векторы[0]['ключ'],
		Шифр.Стандартные_ТЗ[Проверочные_векторы[0]['таблица']],
		Нет
	) == Проверочные_векторы[0]['выход']:
		Вывести('  успешно.')
	Иначе:
		Вывести('ошибка.')

	Вывести('')
	Вывести('=== Хэшевание ===')

	Вывести('* Короткий хэш:')
	Если Хэш.Вычислить(Подготовить_текст(Проверочные_векторы[1]['вход']), Нет) == Проверочные_векторы[1]['выход_1']:
		Вывести('  успешно.')
	Иначе:
		Вывести('ошибка.')

	Вывести('* Длинный хэш:')
	Если \
		Хэш.Вычислить(Подготовить_текст(Проверочные_векторы[1]['вход']), Да) == \
			Проверочные_векторы[1]['выход_2']:
		Вывести('  успешно.')
	Иначе:
		Вывести('  ошибка.')

	Вывести('')
	Вывести('=== Подпись ===')
	Вывести('* Вычисление:')
	ЭЦП.Установить_модуль_хэшевания(Хэш)
	ЭЦП.Установить_источник_случайности(фун *параметры: Проверочные_векторы[2]['k'])
	подпись = ЭЦП.Подписать_данные(
		Проверочные_векторы[2]['h'],
		Проверочные_векторы[2]['d'],
		ЭЦП.Наборы_параметров[Проверочные_векторы[2]['параметры']]
	)
	ЭЦП.Установить_источник_случайности(Случ.СлучЦелое)
	Если подпись == Проверочные_векторы[2]['подпись']:
		Вывести('  успешно.')
	Иначе:
		Вывести(подпись)
		Вывести(Проверочные_векторы[2]['подпись'])
		Вывести('  ошибка.')

	Вывести('* Проверка:')
	Если ЭЦП.Проверить_подпись(
		Проверочные_векторы[2]['h'],
		Проверочные_векторы[2]['подпись'],
		Проверочные_векторы[2]['Q'],
		ЭЦП.Наборы_параметров[Проверочные_векторы[2]['параметры']]
	):
		Вывести('  успешно.')
	Иначе:
		Вывести('  ошибка.')

	Вывести('* Генерация ключей и проверка параметров:')
	ключи = ЭЦП.Сгенерировать_ключи(ЭЦП.Наборы_параметров[0])
	Если ЭЦП.Проверить_параметры(ключи, ЭЦП.Наборы_параметров[0]) == '':
		Вывести('  успешно.')
	Иначе:
		Вывести('  ошибка.')

	Вывести('* Согласование ключей:')
	ключ_1 = ЭЦП.Согласование_ключей(
		(Проверочные_векторы[3]['A_закр'], Проверочные_векторы[3]['B_откр']),
		ЭЦП.Наборы_параметров[Проверочные_векторы[3]['параметры']],
		Проверочные_векторы[3]['UKM'],
		Нет
	)
	ключ_2 = ЭЦП.Согласование_ключей(
		(Проверочные_векторы[3]['B_закр'], Проверочные_векторы[3]['A_откр']),
		ЭЦП.Наборы_параметров[Проверочные_векторы[3]['параметры']],
		Проверочные_векторы[3]['UKM'],
		Нет
	)
	Если ключ_1 == ключ_2 и ключ_1 == Проверочные_векторы[3]['KEK']:
		Вывести('  успешно.')
	Иначе:
		Вывести('  ошибка.')

__Экспорт__ = ['Выполнить']
